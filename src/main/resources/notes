moment.tz.guess();



Arrays.stream(ConstantUtility.getFormTemplateTypeList()).anyMatch(postFormTemplateDto.getFormType()::equals)

    public void getSamlSettings()
            throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {

        DefaultResourceLoader loader = new DefaultResourceLoader();

        Resource storeFile = loader.getResource(samlKeystoreLocation);

        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());

        keystore.load(storeFile.getInputStream(), samlKeystorePassword.toCharArray());
        
        Key key = keystore.getKey(samlKeystoreAlias, samlKeystorePassword.toCharArray());

        if (key instanceof PrivateKey) {
            
            X509Certificate cert = (X509Certificate) keystore.getCertificate(samlKeystoreAlias);
            
            PublicKey publicKey = cert.getPublicKey();
            
            
            byte[] encodedCertKey = cert.getEncoded();
            byte[] encodedPublicKey = publicKey.getEncoded();
            byte[] encodedPrivateKey = key.getEncoded();
            
            String b64CertKey = Base64.getMimeEncoder().encodeToString(encodedCertKey);
            String b64PublicKey = Base64.getMimeEncoder().encodeToString(encodedPublicKey);
            String b64PrivateKey = Base64.getMimeEncoder().encodeToString(encodedPrivateKey);
            
            String certKeyString = "-----BEGIN CERTIFICATE-----" + b64CertKey + "-----END CERTIFICATE-----";
            String publicKeyString = "-----BEGIN CERTIFICATE-----" + b64PublicKey + "-----END CERTIFICATE-----";
            String privateKeyString = "-----BEGIN PRIVATE KEY-----" + b64PrivateKey + "-----END PRIVATE KEY-----";
            
            System.out.println(certKeyString);
            System.out.println(publicKeyString);
            System.out.println(privateKeyString);
        }
        
        
        public boolean containsName(final List<MyObject> list, final String name){
    return list.stream().map(MyObject::getName).filter(name::equals).findFirst().isPresent();
}



public boolean containsName(final List<MyObject> list, final String name){
    return list.stream().filter(o -> o.getName().equals(name)).findFirst().isPresent();
}










//    private static final String[] AUTH_WHITELIST = {
//            // -- Swagger UI v2
//            "/v2/api-docs", "/swagger-resources", "/swagger-resources/**", "/configuration/ui",
//            "/configuration/security", "/swagger-ui.html", "/webjars/**",
//            // -- Swagger UI v3 (OpenAPI)
//            "/v3/api-docs/**", "/swagger-ui/**",
//            "/favicon.ico",
//            // other public endpoints of your API may be appended to this array
//            "/resources/**", "/static/**", "/login*", "/test/**", "/api/v1/auth/*", "/private/assets/**", "/saml/**", 
//            "/api/v1/startups/registration", "/api/v1/managements/registration", "/api/v1/managements/inviteUser" };